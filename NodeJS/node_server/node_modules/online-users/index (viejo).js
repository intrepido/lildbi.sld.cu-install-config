var all_sockets = null;
var couchDB = null;
var momentDate = null;
var users = [];


exports.set_sockets = function  (sockets) {
  all_sockets = sockets;
};

exports.set_couch_ref = function  (couch) {
  couchDB = couch;
};

exports.set_moment_ref = function  (moment) {
  momentDate = moment;	
  momentDate.lang('es', {
    relativeTime : {
        future: "en %s",
        past:   "%s atras",
        s:  "segundos",
        m:  "un minuto",
        mm: "%d minutos",
        h:  "un hora",
        hh: "%d horas",
        d:  "a dia",
        dd: "%d dias",
        M:  "a mes",
        MM: "%d meses",
        y:  "a año",
        yy: "%d años"
    }
  });
};

exports.connect_chatter = function  (config) {
	
	/*setInterval(function() { //Verifico si el usuario esta logueado	    	
		if(all_sockets.sockets[config.socket.id]!=undefined){
			  console.log(all_sockets.sockets[config.socket.id]); 
		}else{
			  console.log("Socket not connected");
		}
	}, 10000);*/
	
	setInterval(function() {//VER
		 var cont=0;
		 users.forEach(function(user){	
			  var arrayTemp = user['data']['socketId'].split('-');
			  if(arrayTemp[1] == config.socket.id){
				  if(config.socket.disconnected){
					  users.splice(cont, 1);
					  config.socket.broadcast.emit('removeUser', {message: user['data']['username']});
					  console.log("Socket " + config.socket.id + " is not connected");
				  }else{
					  console.log("Socket " + config.socket.id + " is connected");
				  }	  
			  }	
			cont++;
		});
		
	}, 10000);
	
  config.socket.on('updateSocketIdUser', function (data) {//VER
	  users.forEach(function(user){	
		  if(user['data']['username'] == data['username']){
			 user['data']['socketId'] = data['username'] + "-" + config.socket.id;				 	
		  }		  
		});
		
	    console.log("JAJAJAJAJAJAJJJA");
		console.log(users);
  });	
	
  config.socket.on('disconnect', function () {
	console.log("DESCONECTADO FALSO");	
  });
  
  //Actualizo el tiempo que llevan online de los usuarios
  config.socket.on('updateTimeConnected', function () {
    console.log("DATEEEEEEEEEEEEEEEEEEEEEEEEEEEE");
	users.forEach(function(user){	
		console.log(momentDate(user['data']['date']).fromNow(true));	
		all_sockets.emit('updateTimeConnected', {message1: momentDate(user['data']['date']).fromNow(), message2: user['data']['username']});		
	})	
  });
  
  config.socket.on('disconnectUser', function  (data) {
	console.log("DESCONECTADO REAL");
	var cont=0;
	users.forEach(function(user){
	    console.log(data['username']);
		if(user['data']['username'] == data['username']){
			users.splice(cont, 1);
			config.socket.broadcast.emit('removeUser', {message: user['data']['username']});
			console.log(users);
		}
		cont++;
	})	
  });
  
  config.socket.on('connectUser', function  (data) {  
	data['socketId'] = data['username'] + "-" + config.socket.id;	
	config.socket.set('user', data);	
	storeUsers(data);	
	console.log("ALMACENA EL USUARIO QUE SE LOGUEO");
	console.log(users);	
	config.socket.broadcast.emit('newUser', {message: data});
  });
  
  config.socket.on('getUsers', function  () {  	
	users.forEach(function(user){
		config.socket.emit('getUsers', {message: user['data']});
		console.log(user['data']);
		console.log("MUESTRA TODOS LOS USUARIOS QUE ESTAN CONECTADOS");
	})	
  });
  
  config.socket.on('getUser', function  (data) {  	   
	users.forEach(function(user){
		console.log(data.message);
		if(user['data']['username'] == data.message){
			config.socket.emit('getUser', {message: user['data']});		
				 
		}
	})	
  });
  
};

exports.failure = function  (socket) {
  socket.emit('error', {message: 'Please log in to the chatroom.'});
};

var storeUsers = function(data){
	users.push({data: data});	
}

