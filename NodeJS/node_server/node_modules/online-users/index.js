var all_sockets = null;
var couchDB = null;
var momentDate = null;
var users = [];
var interval = [];
var jQuery = null;

	
exports.set_sockets = function  (sockets) {
  all_sockets = sockets;
};

exports.set_couch_ref = function  (couch) {
  couchDB = couch;
};

exports.set_js_ref = function  (js) {
	jQuery = js;
};

exports.set_moment_ref = function  (moment) {
  momentDate = moment;	
  momentDate.lang('es', {
    relativeTime : {
        future: "en %s",
        past:   "%s atras",
        s:  "segundos",
        m:  "un minuto",
        mm: "%d minutos",
        h:  "un hora",
        hh: "%d horas",
        d:  "a dia",
        dd: "%d dias",
        M:  "a mes",
        MM: "%d meses",
        y:  "a año",
        yy: "%d años"
    }
  });
};


exports.connect_users = function  (config) {
	 
   //Verifica si el socket del usuario esta desconectado, en caso de estarlo pone al usuario offine en la BD
	verifyDB("users-online", function(exist){ //Verifico que la BD exista
		if(exist >= 0){//Si existe
		   interval[config.socket.id] = setInterval(function() { 
			  if(config.socket.disconnected){
			    getUsers(function(result){
			    	result['data']['rows'].forEach(function(user){	
					   var arrayTemp = user['value']['socketId'].split('-***-');			  
					   if(arrayTemp[1] == config.socket.id){
					    	user['value']['online'] = false;
							updateDatasUser(user['value'], function(result2){ //Se pone como offline en la BD
								config.socket.broadcast.emit('updateDatasUser', {message: user['value']}); //Se cambia el estado en el dashboard de los otros usuarios
								console.log("USUARIO DESCONECTADO");						
							});     
						}		
				    });	    	
			        console.log("Socket " + config.socket.id + " is disconnected");	
			        stop(config.socket.id); //Elimino el intervalo
			    });
			  }else{
				  console.log("Socket " + config.socket.id + " is connected");
			  }		
		    }, 10000);
		}
	 });
  
   
  function stop(key) {
      clearInterval(interval[key]); //Limpio el intervalo del socket desconectado
      var position = interval.indexOf(interval[key]); //obtengo la posicion del intervalo del socket en el arreglo de intervalos
      interval.splice(position, 1); //elimino el intervalo del socket del arreglo de intervalo   
  };
	
  
  //Actualizar socketID mientras navega por el sitio	
  config.socket.on('updateSocketIdUser', function (data) { 
	  getUser(data, function(result){			  
			if(result['data']['rows'].length > 0){ //Si el usuario existe en la BD	
				
				result['data']['rows'][0]['value']['socketId'] = data['username'] + "-***-" + config.socket.id;	//Se pone el nuevo SocketId
				var previousState = result['data']['rows'][0]['value']['online']; //Se guarda el estado que tenia antes de modificarse
				result['data']['rows'][0]['value']['online'] = true; //Se pone al usuario como online
				
				if(!previousState){//Si estaba desconectado
					result['data']['rows'][0]['value']['date'] = momentDate().format("YYYY-MM-DD HH:mm:ss"); //Se pone la nueva fecha y hora de conexion
				}
				
				updateDatasUser(result['data']['rows'][0]['value'], function(result2){ //Actualizo el SocketID y el estado del usuario en la BD
					if(!previousState){//Si estaba desconectado											
						all_sockets.emit('updateDatasUser', {message: result['data']['rows'][0]['value']});	//Lo pongo como conectado en la lista de usuarios conectados						
					}					
				});			
			}	   	
	  });
  });
  
  
  //Actualizar rol de usuario mientras navega por el sitio	
  config.socket.on('updateCurrentRolUser', function (data) { 
	  getUser(data, function(result){			  
			if(result['data']['rows'].length > 0){ //Si el usuario existe en la BD					
				result['data']['rows'][0]['value']['current_rol'] = data.current_rol; //Se pone el rol actual del usuario
				updateDatasUser(result['data']['rows'][0]['value'], function(result2){});	//Actualizo el current_rol del usuario en la BD		
			}	   	
	  });
  });
  
  
  //Actualizo el tiempo que llevan online los usuarios
  config.socket.on('updateTimeConnected', function () {
    console.log("DATEEEEEEEEEEEEEEEEEEEEEEEEEEEE");
    getUsers(function(result){    	
    	result['data']['rows'].forEach(function(user){	
    		//console.log(momentDate(user['value']['date']).fromNow(true));	
    		all_sockets.emit('updateTimeConnected', {message1: momentDate(	user['value']['date']).fromNow(), message2: user['value']['username']});		
    	})
    });
  });
  

  config.socket.on('disconnect', function  () {
	/*config.socket.get('nickname', function(err, name){
		all_sockets.emit('exit', {message: name + ' has disconnected.'});
	});    */
	 //stop();
	// console.log("Socket DESCONECTADO");	
  });
  
  
  //Desconectar Usuario
  config.socket.on('disconnectUser', function  (data) {  	  
	   getUser(data, function(result){		
			if(result['data']['rows'].length > 0){ //Si el usuario existe en la BD	
				result['data']['rows'][0]['value']['online'] = false;
				updateDatasUser(result['data']['rows'][0]['value'], function(result2){ //Se pone como offline en la BD
					config.socket.broadcast.emit('updateDatasUser', {message: result['data']['rows'][0]['value']}); 	//Se cambia el estado en el dashboard de los otros usuarios
					console.log("USUARIO DESCONECTADO");
			   });
			}	   	
		});
  });

  /*config.socket.on('chat', function  (data) {
	config.socket.get('nickname', function(err, name){
		all_sockets.emit('chat', {message: name + ' says: ' + data.message});
		storeMessage(name, data.message);
	});    
  });*/
  
  
  //Conectar Usuario
  config.socket.on('connectUser', function  (data) {
	data['socketId'] = data['username'] + "-***-" + config.socket.id;
	
	verifyDB("users-online", function(exist){ //Verifico que la BD exista	
		  if(exist < 0){//Si no existe	(NOTA: Esto solo ocurre en el momento que se entrega el software por primera vez) 		
			 createDB("users-online", function(result){ //Creo la BD con la vista y el limite de revisiones puesto en 1	
				 storeUser(data, function(result){ //Inserto el usuario en la BD	
					 getUser(data, function(result){
						config.socket.broadcast.emit('newUser', {message: result['data']['rows'][0]['value']});			   
					 });	
			     });	
			 });  
		  }else{//Si ya existe			  
			  getUser(data, function(result){ //Se utilizan los callback ya que es la unica forma de ejecutar el codigo sincronicamente.		
					if(result['data']['rows'].length == 0){	//Si el usuario no esta en la BD  (NOTA: Esto solo ocurre en el momento que se entrega el software por primera vez) 
						storeUser(data, function(result){ //Lo inserto en la BD	
							 getUser(data, function(result){
								config.socket.broadcast.emit('newUser', {message: result['data']['rows'][0]['value']});			   
						   });	
					   });
					}else{ //Si el usuario ya existe en la BD
						data['_id'] = result['data']['rows'][0]['value']['_id'];
						data['_rev'] = result['data']['rows'][0]['value']['_rev'];
						
						updateDatasUser(data, function(result){ //Se actualizan los datos del usuario			
							config.socket.broadcast.emit('updateDatasUser', {message: data}); //Se cambia en el estado en el dashboard de los otros usuarios
						}); 
					}	
			  });	 	
		  }	
		  
		  console.log("USUARIO CONECTADO");
	  });
  });
  
  
  //Obtener Usuarios
  config.socket.on('getUsers', function  () { 
		 getUsers(function(result){		  
		    result['data']['rows'].forEach(function(user){	
		    	config.socket.emit('getUsers', {message: user['value']});			
				console.log("MUESTRA TODOS LOS USUARIOS QUE ESTAN CONECTADOS");	
		    });
		 });		
  });
	  
  
  //Obtener Usuario
  config.socket.on('getUser', function  (data) {	
	  	getUser(data.message, function(result){	  		
	  		if(result['data']['rows'][0]['value']['username'] == data.message.username){
				config.socket.emit('getUser', {message: result['data']['rows'][0]['value']});	
			}				   
	    });
   });
  
  
  //Elimino el usuario
  config.socket.on('removeUser', function (data) {	 
	  getUser(data, function(result){			  
			if(result['data']['rows'].length > 0){ //Si el usuario existe en la BD
				deleteUser(result['data']['rows'][0]['value'], function(result2){
					all_sockets.emit('removeUser', {message: result['data']['rows'][0]['value']});
				});	
				
			}	   	
	  });
  });
  
  //Insertar el usuario
  config.socket.on('insertUser', function (data) {	 
	  data['socketId'] = data['username'] + "-***-" + config.socket.id;	
	  storeUser(data, function(result){ //Inserto el usuario en la BD	
			 getUser(data, function(result){
				config.socket.broadcast.emit('newUser', {message: result['data']['rows'][0]['value']});			   
			 });	
	  });		  	
  });	  
};


exports.failure = function  (socket) {
  socket.emit('error', {message: 'Please log in to the chatroom.'});
};





/************************************************** Callbacks ********************************************************/

var verifyDB = function(dbName, callback){
	couchDB.listDatabases(function (err, resData) {
		if (err)
			return console.error(err);		
		
		console.dir("GET All-----------------------------DB");
		callback(resData.indexOf(dbName));
	});
}

var createDB = function(dbName, callback){
	couchDB.createDatabase(dbName, function (err, resData) {//Se Crea la BD
		if (err)
			return console.error(err);		
		
		setRevLimitsDB(dbName, function(result){//Se le pone el limite de revisiones a 1
			insertViewDB(dbName, function(result){//Se le inserta la vista
				callback(resData);	
			});					
		});	
		console.dir("CREATE-----------------------------DB");
	});
}

var setRevLimitsDB = function(dbName, callback){
	couchDB.revLimits(dbName, "1", function (err, resData) {
		if (err)
			return console.error(err);

		console.dir(resData);
		callback(resData);
	});
}

var insertViewDB = function(dbName, callback){		
	var view = {
			   "_id": "_design/functions",			  
			   "language": "javascript",
			   "views": {
			       "getUserById": {
			           "map": "function(doc) {\n  emit(doc.username, doc);\n}"
			       }
			   }
			 };
	
	couchDB.insertView(dbName, "functions", view, function (err, resData) {
		if (err)
			return console.error(err);

		console.dir(resData);
		callback(resData);
	});
}

var storeUser = function(data, callback){	
	couchDB.insert("users-online", {	
	'userId' : data['userId'],
	'username' : data['username'], 
	'current_rol' : data['current_rol'], 
	'date' : data['date'], 
	'ip' : data['ip'],
	'socketId' : data['socketId'], 
	'online' : data['online']
	}, function (err, resData) {
		if (err)
			return console.error(err);

		console.dir("STORE-----------------------------USER");
		callback(resData);
	});
}


var updateDatasUser = function(data, callback){		
	couchDB.update("users-online", {
		"_id" : data['_id'],
		"_rev" : data['_rev'],
		'userId' : data['userId'],
		'username' : data['username'], 
		'current_rol' : data['current_rol'], 
		'date' : data['date'], 
		'ip' : data['ip'],
		'socketId' : data['socketId'], 
		'online' : data['online']
		}, function (err, resData) {
		if (err)
			return console.error(err);

		console.dir("CHANGE DATAS-----------------------------USERS");
		callback(resData);
	});
}


var deleteUser = function(data, callback){	
	couchDB.del("users-online", data['_id'], data['_rev'], function (err, resData) {
		if (err)
			return console.error(err);

		console.dir("REMOVE-----------------------------USER");
		callback(resData);
	});
}


var getUser = function(data, callback){
	var dbName = "users-online";
	var key = data['username'];	
	var viewUrl = "_design/functions/_view/getUserById";
	var queryOptions = {
		"key" : key
	};

	couchDB.get(dbName, viewUrl, queryOptions, function (err, resData) {
		if (err)
			return console.error(err);

		console.dir("GET-----------------------------USER");
		callback(resData);
	});
}


var getUsers = function(callback){	
	var dbName = "users-online";	
	var viewUrl = "_design/functions/_view/getUserById";
	var queryOptions = null;

	couchDB.get(dbName, viewUrl, queryOptions, function (err, resData) {
		if (err)
			return console.error(err);

		console.dir("GET All-----------------------------USERS");
		callback(resData);
	});
}
